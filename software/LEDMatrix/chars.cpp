/**
 * @file chars.cpp
 * @author Kelly Lynch
 * @date 05 Jan 2018
 * @brief Defines the shape of characters
 *
 * Populates the variables decalared in chars.h with predefined shapes
 * to allow characters to be used more freely.
 * 
 * @TODO: Move all these to program memory
 */
 
#include "chars.h"

/* -- ASCII Characters -- */
/* Capital Letters */
/*const byte*/ //#define A {0b11001111,0b10000111,0b00110011,0b00110011,0b00000011,0b00110011,0b00110011,0b11111111}
const byte A[8] = {0b11001111,0b10000111,0b00110011,0b00110011,0b00000011,0b00110011,0b00110011,0b11111111};
const byte B[8] = {0b00000011,0b10011001,0b10011001,0b10000011,0b10011001,0b10011001,0b00000011,0b11111111};
const byte C[8] = {0b11000011,0b10011001,0b00111111,0b00111111,0b00111111,0b10011001,0b11000011,0b11111111};
const byte D[8] = {0b00000111,0b10010011,0b10011001,0b10011001,0b10011001,0b10010011,0b00000111,0b11111111};
const byte E[8] = {0b00000001,0b10011101,0b10010111,0b10000111,0b10010111,0b10011101,0b00000001,0b11111111};
const byte F[8] = {0b00000001,0b10011101,0b10010111,0b10000111,0b10010111,0b10011111,0b00001111,0b11111111};
const byte G[8] = {0b11000011,0b10011001,0b00111111,0b00111111,0b00110001,0b10011001,0b11000001,0b11111111};
const byte H[8] = {0b00110011,0b00110011,0b00110011,0b00000011,0b00110011,0b00110011,0b00110011,0b11111111};
const byte I[8] = {0b10000111,0b11001111,0b11001111,0b11001111,0b11001111,0b11001111,0b10000111,0b11111111};
const byte J[8] = {0b11100001,0b11110011,0b11110011,0b11110011,0b00110011,0b00110011,0b10000111,0b11111111};
const byte K[8] = {0b00011001,0b10011001,0b10010011,0b10000111,0b10010011,0b10011001,0b00011001,0b11111111};
const byte L[8] = {0b00001111,0b10011111,0b10011111,0b10011111,0b10011101,0b10011001,0b00000001,0b11111111};
const byte M[8] = {0b00111001,0b00010001,0b00000001,0b00000001,0b00101001,0b00111001,0b00111001,0b11111111};
const byte N[8] = {0b00111001,0b00011001,0b00001001,0b00100001,0b00110001,0b00111001,0b00111001,0b11111111};
const byte O[8] = {0b11000111,0b10010011,0b00111001,0b00111001,0b00111001,0b10010011,0b11000111,0b11111111};
const byte P[8] = {0b00000011,0b10011001,0b10011001,0b10000011,0b10011111,0b10011111,0b00001111,0b11111111};
const byte Q[8] = {0b10000111,0b00110011,0b00110011,0b00110011,0b00100011,0b10000111,0b11100011,0b11111111};
const byte R[8] = {0b00000011,0b10011001,0b10011001,0b10000011,0b10010011,0b10011001,0b00011001,0b11111111};
const byte S[8] = {0b10000111,0b00110011,0b00011111,0b10001111,0b11100011,0b00110011,0b10000111,0b11111111};
const byte T[8] = {0b00000011,0b01001011,0b11001111,0b11001111,0b11001111,0b11001111,0b10000111,0b11111111};
const byte U[8] = {0b00110011,0b00110011,0b00110011,0b00110011,0b00110011,0b00110011,0b00000011,0b11111111};
const byte V[8] = {0b00110011,0b00110011,0b00110011,0b00110011,0b00110011,0b10000111,0b11001111,0b11111111};
const byte W[8] = {0b00111001,0b00111001,0b00111001,0b00101001,0b00000001,0b00010001,0b00111001,0b11111111};
const byte X[8] = {0b00111001,0b00111001,0b10010011,0b11000111,0b11000111,0b10010011,0b00111001,0b11111111};
const byte Y[8] = {0b00110011,0b00110011,0b00110011,0b10000111,0b11001111,0b11001111,0b10000111,0b11111111};
const byte Z[8] = {0b00000001,0b00111001,0b01110011,0b11100111,0b11001101,0b10011001,0b00000001,0b11111111};
/* Lower Case Letters */
const byte low_a[8] = {0b11111111,0b11111111,0b10000111,0b11110011,0b10000011,0b00110011,0b10001001,0b11111111};
const byte low_b[8] = {0b00011111,0b10011111,0b10011111,0b10000011,0b10011001,0b10011001,0b00100011,0b11111111};
const byte low_c[8] = {0b11111111,0b11111111,0b10000111,0b00110011,0b00111111,0b00110011,0b10000111,0b11111111};
const byte low_d[8] = {0b11100011,0b11110011,0b11110011,0b10000011,0b00110011,0b00110011,0b10001001,0b11111111};
const byte low_e[8] = {0b11111111,0b11111111,0b10000111,0b00110011,0b00000011,0b00111111,0b10000111,0b11111111};
const byte low_f[8] = {0b11000111,0b10010011,0b10011111,0b00001111,0b10011111,0b10011111,0b00001111,0b11111111};
const byte low_g[8] = {0b11111111,0b11111111,0b10001001,0b00110011,0b00110011,0b10000011,0b11110011,0b00000111};
const byte low_h[8] = {0b00011111,0b10011111,0b10010011,0b10001001,0b10011001,0b10011001,0b00011001,0b11111111};
const byte low_i[8] = {0b11001111,0b11111111,0b10001111,0b11001111,0b11001111,0b11001111,0b10000111,0b11111111};
const byte low_j[8] = {0b11110011,0b11111111,0b11110011,0b11110011,0b11110011,0b00110011,0b00110011,0b10000111};
const byte low_k[8] = {0b00011111,0b10011111,0b10011001,0b10010011,0b10000111,0b10010011,0b00011001,0b11111111};
const byte low_l[8] = {0b10001111,0b11001111,0b11001111,0b11001111,0b11001111,0b11001111,0b10000111,0b11111111};
const byte low_m[8] = {0b11111111,0b11111111,0b00110011,0b00000001,0b00000001,0b00101001,0b00111001,0b11111111};
const byte low_n[8] = {0b11111111,0b11111111,0b00000111,0b00110011,0b00110011,0b00110011,0b00110011,0b11111111};
const byte low_o[8] = {0b11111111,0b11111111,0b10000111,0b00110011,0b00110011,0b00110011,0b10000111,0b11111111};
const byte low_p[8] = {0b11111111,0b11111111,0b00100011,0b10011001,0b10011001,0b10000011,0b10011111,0b00001111};
const byte low_q[8] = {0b11111111,0b10001001,0b10110011,0b00110011,0b00110011,0b10000011,0b11110011,0b11100001};
const byte low_r[8] = {0b11111111,0b11111111,0b00100011,0b10001001,0b10011001,0b10011111,0b00001111,0b11111111};
const byte low_s[8] = {0b11111111,0b11111111,0b10000011,0b00111111,0b10000111,0b11110011,0b00000111,0b11111111};
const byte low_t[8] = {0b11101111,0b11001111,0b10000011,0b11001111,0b11001111,0b11001011,0b11100111,0b11111111};
const byte low_u[8] = {0b11111111,0b11111111,0b00110011,0b00110011,0b00110011,0b00110011,0b10001001,0b11111111};
const byte low_v[8] = {0b11111111,0b11111111,0b00110011,0b00110011,0b00110011,0b10000111,0b11001111,0b11111111};
const byte low_w[8] = {0b11111111,0b11111111,0b00111001,0b00101001,0b00000001,0b00000001,0b10010011,0b11111111};
const byte low_x[8] = {0b11111111,0b11111111,0b00111001,0b10010011,0b11000111,0b10010011,0b00111001,0b11111111};
const byte low_y[8] = {0b11111111,0b11111111,0b00110011,0b00110011,0b00110011,0b10000011,0b11110011,0b00000111};
const byte low_z[8] = {0b11111111,0b11111111,0b00000011,0b01100111,0b11001111,0b10011011,0b00000011,0b11111111};
/* Numbers */
const byte ZERO[8] = {0b10000011,0b00111001,0b00110001,0b00100001,0b00001001,0b00111001,0b10000011,0b11111111};
const byte ONE[8] = {0b11001111,0b10001111,0b11001111,0b11001111,0b11001111,0b11001111,0b00000011,0b11111111};
const byte TWO[8] = {0b10000111,0b00110011,0b11110011,0b11000111,0b10011111,0b00110011,0b00000011,0b11111111};
const byte THREE[8] = {0b10000111,0b00110011,0b11110011,0b11000111,0b11110011,0b00110011,0b10000111,0b11111111};
const byte FOUR[8] = {0b11100011,0b11000011,0b10010011,0b00110011,0b00000001,0b11110011,0b11100001,0b11111111};
const byte FIVE[8] = {0b00000011,0b00111111,0b00000111,0b11110011,0b11110011,0b00110011,0b10000111,0b11111111};
const byte SIX[8] = {0b11000111,0b10011111,0b00111111,0b00000111,0b00110011,0b00110011,0b10000111,0b11111111};
const byte SEVEN[8] = {0b00000011,0b00110011,0b11110011,0b11100111,0b11001111,0b11001111,0b11001111,0b11111111};
const byte EIGHT[8] = {0b10000111,0b00110011,0b00110011,0b10000111,0b00110011,0b00110011,0b10000111,0b11111111};
const byte NINE[8] = {0b10000111,0b00110011,0b00110011,0b10000011,0b11110011,0b11100111,0b10001111,0b11111111};
/* Non number/letter characters */
const byte SPACE[8] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
const byte EXCLAIMATION[8] = {0b11001111,0b10000111,0b10000111,0b11001111,0b11001111,0b11111111,0b11001111,0b11111111};
const byte DOUBLEQUOTE[8] = {0b10010011,0b10010011,0b10010011,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
const byte OCTOTHORPE[8] = {0b10010011,0b10010011,0b00000001,0b10010011,0b00000001,0b10010011,0b10010011,0b11111111};
const byte DOLLAR[8] = {0b11001111,0b10000011,0b00111111,0b10000111,0b11110011,0b00000111,0b11001111,0b11111111};
const byte PERCENTAGE[8] = {0b11111111,0b00111001,0b00110011,0b11100111,0b11001111,0b10011001,0b00111001,0b11111111};
const byte AMPERSAND[8] = {0b11000111,0b10010011,0b11000111,0b10001001,0b00110011,0b00110011,0b10001001,0b11111111};
const byte SINGLEQUOTE[8] = {0b10011111,0b10011111,0b00111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
const byte LEFTPAREN[8] = {0b11100111,0b11001111,0b10011111,0b10011111,0b10011111,0b11001111,0b11100111,0b11111111};
const byte RIGHTPAREN[8] = {0b10011111,0b11001111,0b11100111,0b11100111,0b11100111,0b11001111,0b10011111,0b11111111};
const byte ASTERISK[8] = {0b11111111,0b10011001,0b11000011,0b00000000,0b11000011,0b10011001,0b11111111,0b11111111};
const byte PLUS[8] = {0b11111111,0b11001111,0b11001111,0b00000011,0b11001111,0b11001111,0b11111111,0b11111111};
const byte COMMA[8] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11001111,0b11001111,0b10011111};
const byte DASH[8] = {0b11111111,0b11111111,0b11111111,0b00000011,0b11111111,0b11111111,0b11111111,0b11111111};
const byte FULLSTOP[8] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11001111,0b11001111,0b11111111};
const byte FORWARDSLASH[8] = {0b11111001,0b11110011,0b11100111,0b11001111,0b10011111,0b00111111,0b01111111,0b11111111};
const byte COLON[8] = {0b11111111,0b11001111,0b11001111,0b11111111,0b11111111,0b11001111,0b11001111,0b11111111};
const byte SEMICOLON[8] = {0b11111111,0b11001111,0b11001111,0b11111111,0b11111111,0b11001111,0b11001111,0b10011111};
const byte LESSTHAN[8] = {0b11100111,0b11001111,0b10011111,0b00111111,0b10011111,0b11001111,0b11100111,0b11111111};
const byte EQUALS[8] = {0b11111111,0b11111111,0b00000011,0b11111111,0b11111111,0b00000011,0b11111111,0b11111111};
const byte GREATERTHAN[8] = {0b10011111,0b11001111,0b11100111,0b11110011,0b11100111,0b11001111,0b11011111,0b11111111};
const byte QUESTIONMARK[8] = {0b10000111,0b00110011,0b11110011,0b11100111,0b11001111,0b11111111,0b11001111,0b11111111};
const byte AT[8] = {0b10000011,0b00111001,0b00100001,0b00100001,0b00100001,0b00111111,0b10000111,0b11111111};
const byte LEFTSQUAREBRACKET[8] = {0b10000111,0b10011111,0b10011111,0b10011111,0b10011111,0b10011111,0b10000111,0b11111111};
const byte BACKSLASH[8] = {0b00111111,0b10011111,0b11001111,0b11100111,0b11110011,0b11111001,0b11111101,0b11111111};
const byte RIGHTSQUAREBRACKET[8] = {0b10000111,0b11100111,0b11100111,0b11100111,0b11100111,0b11100111,0b10000111,0b11111111};
const byte CARET[8] = {0b11101111,0b11000111,0b10010011,0b00111001,0b11111111,0b11111111,0b11111111,0b11111111};
const byte UNDERSCORE[8] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b00000000};
const byte GRAVE[8] = {0b11001111,0b11001111,0b11100111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
const byte LEFTCURLY[8] = {0b11100011,0b11001111,0b11001111,0b00011111,0b11001111,0b11001111,0b11100011,0b11111111};
const byte PIPE[8] = {0b11100111,0b11100111,0b11100111,0b11100111,0b11100111,0b11100111,0b11100111,0b11111111};
const byte RIGHTCURLY[8] = {0b00011111,0b11001111,0b11001111,0b11100011,0b11001111,0b11001111,0b00011111,0b11111111};
const byte TILDE[8] = {0b10001001,0b00100011,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
/* Special Characters */

/* -- Functions -- */
/**
* @brief Character Lookup Table Function
* Checks the character input and outputs the const byte code for displaying the character on
* the screen.
* 
* @return Returns the coresponding LED pattern (const byte array)
*/
const byte* charLookupTable(char character){
  switch(character){
    case ' ' : return SPACE;
    case '!' : return EXCLAIMATION;
    case '"' : return DOUBLEQUOTE;
    case '#' : return OCTOTHORPE;
    case '$' : return DOLLAR;
    case '%' : return PERCENTAGE;
    case '&' : return AMPERSAND;
    case '\'' : return SINGLEQUOTE;
    case '(' : return LEFTPAREN;
    case ')' : return RIGHTPAREN;
    case '*' : return ASTERISK;
    case '+' : return PLUS;
    case ',' : return COMMA;
    case '-' : return DASH;
    case '.' : return FULLSTOP;
    case '/' : return FORWARDSLASH;
    case '0' : return ZERO;
    case '1' : return ONE;
    case '2' : return TWO;
    case '3' : return THREE;
    case '4' : return FOUR;
    case '5' : return FIVE;
    case '6' : return SIX;
    case '7' : return SEVEN;
    case '8' : return EIGHT;
    case '9' : return NINE;
    case ':' : return COLON;
    case ';' : return SEMICOLON;
    case '<' : return LESSTHAN;
    case '=' : return EQUALS;
    case '>' : return GREATERTHAN;
    case '?' : return QUESTIONMARK;
    case '@' : return AT;
    case 'A' : return A;
    case 'B' : return B;
    case 'C' : return C;
    case 'D' : return D;
    case 'E' : return E;
    case 'F' : return F;
    case 'G' : return G;
    case 'H' : return H;
    case 'I' : return I;
    case 'J' : return J;
    case 'K' : return K;
    case 'L' : return L;
    case 'M' : return M;
    case 'N' : return N;
    case 'O' : return O;
    case 'P' : return P;
    case 'Q' : return Q;
    case 'R' : return R;
    case 'S' : return S;
    case 'T' : return T;
    case 'U' : return U;
    case 'V' : return V;
    case 'W' : return W;
    case 'X' : return X;
    case 'Y' : return U;
    case 'Z' : return Z;
    case '[' : return LEFTSQUAREBRACKET;
    case '\\' : return BACKSLASH;
    case ']' : return RIGHTSQUAREBRACKET;
    case '^' : return CARET;
    case '_' : return UNDERSCORE;
    case '`' : return GRAVE;
    case 'a' : return low_a;
    case 'b' : return low_b;
    case 'c' : return low_c;
    case 'd' : return low_d;
    case 'e' : return low_e;
    case 'f' : return low_f;
    case 'g' : return low_g;
    case 'h' : return low_h;
    case 'i' : return low_i;
    case 'j' : return low_j;
    case 'k' : return low_k;
    case 'l' : return low_l;
    case 'm' : return low_m;
    case 'n' : return low_n;
    case 'o' : return low_o;
    case 'p' : return low_p;
    case 'q' : return low_q;
    case 'r' : return low_r;
    case 's' : return low_s;
    case 't' : return low_t;
    case 'u' : return low_u;
    case 'v' : return low_v;
    case 'w' : return low_w;
    case 'x' : return low_x;
    case 'y' : return low_y;
    case 'z' : return low_z;
    case '{' : return LEFTCURLY;
    case '|' : return PIPE;
    case '}' : return RIGHTCURLY;
    case '~' : return TILDE;
  }
  /* If there's an invalid input return space */
  return SPACE;
}
